# Suppress: EC112 EC114
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 4
insert_final_newline = true
trim_trailing_whitespace = true

##########################################
# File Extension Settings
##########################################

# Visual Studio Solution Files
[*.sln]
indent_style = tab

# Visual Studio XML Project Files
[*.{csproj, vbproj, vcxproj.filters, proj, projitems, shproj}]
indent_size = 2

# XML Configuration Files
[*.{xml, config, props, targets, nuspec, resx, ruleset, vsixmanifest, vsct}]
indent_size = 2

# JSON Files
[*.{json, json5, webmanifest}]
indent_size = 2

[*.{cs, csx, cake, vb, vbx}]
indent_size = 2


###############################################################################
# Language rules
###############################################################################

###############################
# .NET style rules
###############################

# 'this.' or 'me.' qualifiers
dotnet_style_qualification_for_field = false
dotnet_style_qualification_for_property = false
dotnet_style_qualification_for_method = false
dotnet_style_qualification_for_event = false

# Language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Modifier preferences
csharp_preferred_modifier_order = public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async:suggestion
dotnet_style_readonly_field = true:suggestion

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_operators = always_for_clarity:warning

# Expression-level preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = true:suggestion
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion

# "null" checking preferences
dotnet_style_coalesce_expression = true:warning
dotnet_style_null_propagation = true:error
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion

###############################
# C# Style Rules              #
###############################

# 'var' preferences
csharp_style_var_elsewhere = true

# Expression-bodied members
csharp_style_expression_bodied_methods = when_on_single_line:warning
csharp_style_expression_bodied_constructors = when_on_single_line:warning
csharp_style_expression_bodied_operators = when_on_single_line:warning
csharp_style_expression_bodied_properties = when_on_single_line:warning
csharp_style_expression_bodied_indexers = when_on_single_line:warning
csharp_style_expression_bodied_accessors = when_on_single_line:warning

# Pattern matching
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_prefer_switch_expression = true:suggestion
csharp_style_prefer_pattern_matching = true:suggestion

# Expression-level preferences
csharp_style_inlined_variable_declaration = true:warning
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_prefer_index_operator = true:suggestion

# "Null" checking preferences
csharp_style_throw_expression = true:warning
csharp_style_conditional_delegate_call = true:warning

# Code block preferences
csharp_prefer_braces = true:suggestion

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace

###############################################################################
# Formatting Rules
###############################################################################

###############################
# .NET Formatting Rules       #
###############################

# Organize usings
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = true

###############################
# C# Formatting Rules         #
###############################

# Newline options
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation options
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = no_change
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = true

# Space options
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false

csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true

csharp_space_around_binary_operators = before_and_after

csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false

csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false

csharp_space_after_comma = true
csharp_space_before_comma = false

csharp_space_after_dot = false
csharp_space_before_dot = false

csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false

csharp_space_around_declaration_statements = false

csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false

# Wrap options
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

######################################################
#               Naming Conventions                   #
######################################################

######## Naming Symbols Section ######################

# constant_fields - Define constant fields
dotnet_naming_symbols.constant_fields.applicable_kinds = field, local
dotnet_naming_symbols.constant_fields.required_modifiers = const

# static_readonly_fields - Define static and readonly fields
dotnet_naming_symbols.static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.static_readonly_fields.required_modifiers = static, readonly

# public_fields - Define public fields
dotnet_naming_symbols.public_fields.applicable_accessibilities = public
dotnet_naming_symbols.public_fields.applicable_kinds = field

# private_protected_fields - Define private and protected fields
dotnet_naming_symbols.private_protected_fields.applicable_accessibilities = private, protected, local
dotnet_naming_symbols.private_protected_fields.applicable_kinds = field, local

# public_symbols - Define any public symbol
dotnet_naming_symbols.public_symbols.applicable_accessibilities = public, protected
dotnet_naming_symbols.public_symbols.applicable_kinds = method, property, event, delegate

# parameters - Defines any parameter
dotnet_naming_symbols.parameters.applicable_kinds = parameter

# non_interface_and_enum_types - Defines class, struct and delegate types
dotnet_naming_symbols.non_interface_and_enum_types.applicable_kinds = class, struct, delegate

# interface_types - Defines interfaces
dotnet_naming_symbols.interface_types.applicable_kinds = interface

# non_enum_types - Defines class, struct, enum and delegate types
dotnet_naming_symbols.enum_types.applicable_kinds = enum

# async_methods_symbols - Defines async methods
dotnet_naming_symbols.async_methods_symbols.applicable_kinds = method
dotnet_naming_symbols.async_methods_symbols.required_modifiers = async

######## Naming Styles Section ######################

# all_upper - The all character must be upper-case character
dotnet_naming_style.all_upper_style.capitalization = all_upper
dotnet_naming_style.all_upper_style.word_separator = _

# pascal_case - Define the Pascal_case style
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# prefix_interface_interface_with_i - Interfaces must be PascalCase and the first character of an interface must be an 'I'
dotnet_naming_style.prefix_interface_interface_pascal_case_with_i.capitalization = pascal_case
dotnet_naming_style.prefix_interface_interface_pascal_case_with_i.required_prefix = I

# suffix_with_enum_style - Enums must be PascalCase and end with 'Enum'
dotnet_naming_style.suffix_with_enum_style.capitalization = pascal_case
dotnet_naming_style.suffix_with_enum_style.required_suffix = Enum

# suffix_with_async_style - Async methods must be PascalCase and end with 'Async'
dotnet_naming_style.suffix_with_async_style.capitalization = pascal_case
dotnet_naming_style.suffix_with_async_style.required_suffix = Async

# first_upper_style - The first character must start with an upper-case character
dotnet_naming_style.first_upper_style.capitalization = first_word_upper

# pascal_case - Define the Pascal_case style
dotnet_naming_style.camel_case_style.capitalization = camel_case

# prefix_private_protected_fields_and_local_members_with_underscore - Private protected fields and local members must be camel_case and the first character must be an '_'
dotnet_naming_style.prefix_private_protected_fields_and_local_members_with_underscore.capitalization = camel_case
dotnet_naming_style.prefix_private_protected_fields_and_local_members_with_underscore.required_prefix = _

######## Naming Rules Section ######################

# Async methods must be PascalCase and end with an 'Async'
dotnet_naming_rule.async_methods_must_be_suffixed_with_async.severity = suggestion
dotnet_naming_rule.async_methods_must_be_suffixed_with_async.symbols = async_methods_symbols
dotnet_naming_rule.async_methods_must_be_suffixed_with_async.style = suffix_with_async_style

# Constant fields must be ALLUPPER
dotnet_naming_rule.constant_fields_must_be_pascal_case.severity = warning
dotnet_naming_rule.constant_fields_must_be_pascal_case.symbols = constant_fields
dotnet_naming_rule.constant_fields_must_be_pascal_case.style = all_upper_style

# Static readonly fields must be PascalCase
dotnet_naming_rule.static_readonly_fields_must_be_pascal_case.severity = suggestion
dotnet_naming_rule.static_readonly_fields_must_be_pascal_case.symbols = static_readonly_fields
dotnet_naming_rule.static_readonly_fields_must_be_pascal_case.style = pascal_case_style

# Public fields must be PascalCase
dotnet_naming_rule.public_fields_must_be_pascal_case.severity = suggestion
dotnet_naming_rule.public_fields_must_be_pascal_case.symbols = public_fields
dotnet_naming_rule.public_fields_must_be_pascal_case.style = pascal_case_style

# Private and protected fields and locals must be camelCase
dotnet_naming_rule.private_protected_fields_and_locals_must_be_camel_case.severity = silent
dotnet_naming_rule.private_protected_fields_and_locals_must_be_camel_case.symbols = private_protected_fields
dotnet_naming_rule.private_protected_fields_and_locals_must_be_camel_case.style = prefix_private_protected_fields_and_local_members_with_underscore

# Public members must be capitalized
dotnet_naming_rule.public_members_must_be_capitalized.severity = suggestion
dotnet_naming_rule.public_members_must_be_capitalized.symbols = public_symbols
dotnet_naming_rule.public_members_must_be_capitalized.style = first_upper_style

# Parameters must be camelCase
dotnet_naming_rule.parameters_must_be_camel_case.severity = suggestion
dotnet_naming_rule.parameters_must_be_camel_case.symbols = parameters
dotnet_naming_rule.parameters_must_be_camel_case.style = camel_case_style

# Class, struct, enum and delegates must be PascalCase
dotnet_naming_rule.non_interface_and_enum_types_must_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_interface_and_enum_types_must_be_pascal_case.symbols = non_interface_and_enum_types
dotnet_naming_rule.non_interface_and_enum_types_must_be_pascal_case.style = pascal_case_style

# Interfaces must be PascalCase and start with an 'I'
dotnet_naming_rule.interface_types_must_be_prefixed_with_i.severity = warning
dotnet_naming_rule.interface_types_must_be_prefixed_with_i.symbols = interface_types
dotnet_naming_rule.interface_types_must_be_prefixed_with_i.style = prefix_interface_interface_pascal_case_with_i

# Enums must be PascalCase and end with an 'Enum'
dotnet_naming_rule.enum_types_must_be_suffixed_with_enum.severity = warning
dotnet_naming_rule.enum_types_must_be_suffixed_with_enum.symbols = enum_types
dotnet_naming_rule.enum_types_must_be_suffixed_with_enum.style = suffix_with_enum_style
